const express = require('express');
const mssql = require('mssql');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const app = express();
const port = 3000;
const cors = require('cors');
const upload = multer();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.use(cors({
  origin: 'http://127.0.0.1:5500', // –¢–æ—Ç –∞–¥—Ä–µ—Å, –æ—Ç–∫—É–¥–∞ —Ç—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å HTML-—Ñ–∞–π–ª
  credentials: true               // –í–ê–ñ–ù–û: —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É–∫–∏
}));

const session = require('express-session');
app.use(session({
  secret: 'mclaren_secret_key',
  resave: false,
  saveUninitialized: true,
  cookie: {
    secure: false, // true ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ HTTPS
    sameSite: 'lax' // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –Ω–∞ –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–µ
  }
}));
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Windows Authentication
const sqlConfig = {
  user: '090T',
  password: '090T',
  server: 'DESKTOP-UBFNKMT',
  database: 'McLaren_Store',
  options: {
    encrypt: true,
    trustServerCertificate: true,
    integratedSecurity: false
  }
};

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
mssql.connect(sqlConfig)
  .then(pool => {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ');
    app.locals.db = pool;

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    app.listen(port, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
    });

  })
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
  });

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω
app.get('/api/cars', async (req, res) => {
  try {
    const result = await app.locals.db
      .request()
      .query('SELECT * FROM Cars WHERE Available = 1');  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω

    const cars = result.recordset.map(car => ({
      CarID: car.CarID,
      Model: car.Model,
      Year: car.Year,
      Color: car.Color,
      Price: car.Price,
      EngineType: car.EngineType,
      Transmission: car.Transmission,
      Available: car.Available,
      Image: car.Image ? Buffer.from(car.Image).toString('base64') : null // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –∫–ª–∏–µ–Ω—Ç
    }));

    res.json(cars);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—à–∏–Ω:', error);
    res.status(500).send('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Cars');
  }
});
app.get('/api/getProfile', async (req, res) => {
  try {
      const pool = app.locals.db;

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
      const userId = req.session.user?.id;  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Å–µ—Å—Å–∏–∏

      if (!userId) {
          return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
      }

      let request = pool.request();
      request.input('id', mssql.Int, userId);

      const result = await request.query('SELECT * FROM Customers WHERE CustomerID = @id');

      if (result.recordset.length > 0) {
          const userData = result.recordset[0];
          return res.json({
              success: true,
              user: {
                  firstName: userData.FirstName,
                  lastName: userData.LastName,
                  username: userData.UserName,
                  email: userData.Email,
                  password: userData.Password
                  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
              }
          });
      } else {
          return res.json({ success: false, message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
  } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', err);
      res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
app.post('/api/updateProfile', async (req, res) => {
  try {
      const { CustomerID, UserName, Password, FirstName, LastName, PhoneNumber, Email, Address } = req.body;
      console.log("–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å ID:", CustomerID);
      console.log('Received update data:', req.body);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≤ —Ç–æ–º —á–∏—Å–ª–µ –ø–∞—Ä–æ–ª—å
      if (!CustomerID || !FirstName || !LastName || !UserName || !PhoneNumber || !Email || !Address || !Password) {
          return res.status(400).json({ success: false, message: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª—å' });
      }

      const pool = app.locals.db; // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏–∑ app.locals

      // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const query = `
          UPDATE dbo.Customers
          SET UserName = @UserName, FirstName = @FirstName, LastName = @LastName, PhoneNumber = @PhoneNumber, Email = @Email, Address = @Address, Password = @Password
          WHERE CustomerID = @CustomerID
      `;
      
      const request = pool.request();
      request.input('UserName', mssql.VarChar, UserName);
      request.input('FirstName', mssql.VarChar, FirstName);
      request.input('LastName', mssql.VarChar, LastName);
      request.input('PhoneNumber', mssql.VarChar, PhoneNumber);
      request.input('Email', mssql.VarChar, Email);
      request.input('Address', mssql.VarChar, Address);
      request.input('Password', mssql.VarChar, Password);
      request.input('CustomerID', mssql.Int, CustomerID);

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await request.query(query);

      res.json({ success: true });
  } catch (error) {
      console.error('Error updating profile:', error);
      res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});



// API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.post('/api/login', async (req, res) => {
  const { username, password } = req.body;
  
  try {
    const pool = app.locals.db;
    const request = pool.request()
      .input('username', mssql.VarChar, username)
      .input('password', mssql.VarChar, password);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
    const customerQuery = `SELECT * FROM Customers WHERE UserName = @username AND Password = @password`;
    const customerResult = await request.query(customerQuery);

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if (customerResult.recordset.length === 0) {
      const employeeQuery = `SELECT * FROM Employees WHERE UserName = @username AND Password = @password`;
      const employeeResult = await request.query(employeeQuery);

      if (employeeResult.recordset.length > 0) {
        // –ï—Å–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
        const employee = employeeResult.recordset[0];
        req.session.user = {
          id: employee.EmployeeID,
          username: employee.UserName,
          role: 'admin', // –†–æ–ª—å –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        };
        return res.json({
          success: true,
          user: employee,
          redirectToAdminPanel: true,  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å
        });
      } else {
        return res.json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—è' });
      }
    } else {
      const customer = customerResult.recordset[0];
      req.session.user = {
        id: customer.CustomerID,
        username: customer.UserName,
        role: 'user',  // –†–æ–ª—å –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤
      };
      return res.json({
        success: true,
        user: customer,
        redirectToAdminPanel: false,  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ—Ä–æ–Ω—Ç, —á—Ç–æ –º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±—ã—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
app.get('/api/session', (req, res) => {
  if (req.session.user) {
    res.json({ loggedIn: true, user: req.session.user });
  } else {
    res.json({ loggedIn: false });
  }
});
app.post('/api/logout', (req, res) => {
  req.session.destroy(err => {
    if (err) return res.status(500).json({ success: false });
    res.clearCookie('connect.sid');
    res.json({ success: true });
  });
});
// API –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
app.get('/adminPanel.html', (req, res) => {
  if (req.session.user && req.session.user.role === 'admin') {
    res.sendFile(path.join(__dirname, 'public', 'adminPanel.html'));
  } else {
    res.status(403).send('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
  }
});
// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
app.post('/api/addCar', upload.single('Image'), async (req, res) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª
    console.log('Received body:', req.body);
    console.log('Received file:', req.file);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const { Model, Year, Color, Price, EngineType, Transmission } = req.body;
    const imageFile = req.file; // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    if (!Model || !Year || !Color || !Price || !EngineType || !Transmission || !imageFile) {
      return res.status(400).json({ success: false, message: '–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const imageBuffer = imageFile.buffer; // .buffer —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const pool = app.locals.db;
    const request = pool.request();

    // –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É Cars
    await request.input('Model', mssql.VarChar, Model);
    await request.input('Year', mssql.Int, Year);
    await request.input('Color', mssql.VarChar, Color);
    await request.input('Price', mssql.Decimal(18, 2), Price);
    await request.input('EngineType', mssql.VarChar, EngineType);
    await request.input('Transmission', mssql.VarChar, Transmission);
    await request.input('Image', mssql.VarBinary, imageBuffer); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    const query = `
      INSERT INTO Cars (Model, Year, Color, Price, EngineType, Transmission,Available, Image)
      VALUES (@Model, @Year, @Color, @Price, @EngineType, @Transmission,1, @Image)
    `;
    await request.query(query);

    res.json({ success: true, message: '–ú–∞—à–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});
// üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
app.get('/api/tables', async (req, res) => {
  try {
    const result = await app.locals.db.request().query(`
      SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE='BASE TABLE' AND TABLE_SCHEMA='dbo'
    `);
    res.json(result.recordset.map(row => row.TABLE_NAME));
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
app.get('/api/table/:tableName', async (req, res) => {
  const { tableName } = req.params;
  try {
    const result = await app.locals.db.request().query(`SELECT * FROM [dbo].[${tableName}]`);

    let data = result.recordset;

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ Cars
    if (tableName === 'Cars') {
      data = data.map(car => ({
        ...car,
        Image: car.Image ? `data:image/jpeg;base64,${Buffer.from(car.Image).toString('base64')}` : null
      }));
    }

    res.json(data);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// üîπ –û–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
app.post('/api/table/:tableName/update', async (req, res) => {
  const { tableName } = req.params;
  const { id, column, value, idColumn } = req.body;

  try {
    const query = `
      UPDATE [dbo].[${tableName}]
      SET [${column}] = @value
      WHERE [${idColumn}] = @id
    `;
    const request = app.locals.db.request();
    request.input('value', value);
    request.input('id', id);
    await request.query(query);
    res.json({ success: true });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
// –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
const fieldNames = {
  UserName: '–õ–æ–≥–∏–Ω',
  Password: '–ü–∞—Ä–æ–ª—å',
  FirstName: '–ò–º—è',
  LastName: '–§–∞–º–∏–ª–∏—è',
  PhoneNumber: '–¢–µ–ª–µ—Ñ–æ–Ω',
  Email: 'Email',
  Address: '–ê–¥—Ä–µ—Å'
};
// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/register', async (req, res) => {
  const { username, password, firstName, lastName, phone, email, address } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
  if (!username || !password || !firstName || !lastName || !phone || !email || !address) {
    return res.status(400).json({
      success: false,
      message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è',
      missingFields: {
        username: !username,
        password: !password,
        firstName: !firstName,
        lastName: !lastName,
        phone: !phone,
        email: !email,
        address: !address
      }
    });
  }

  try {
    const pool = await mssql.connect(sqlConfig);
    await pool.request()
      .input('UserName', mssql.VarChar, username)
      .input('Password', mssql.VarChar, password)
      .input('FirstName', mssql.VarChar, firstName)
      .input('LastName', mssql.VarChar, lastName)
      .input('PhoneNumber', mssql.VarChar, phone)
      .input('Email', mssql.VarChar, email)
      .input('Address', mssql.VarChar, address)
      .query(`
        INSERT INTO Customers (UserName, Password, FirstName, LastName, PhoneNumber, Email, Address)
        VALUES (@UserName, @Password, @FirstName, @LastName, @PhoneNumber, @Email, @Address)
      `);

    res.json({ success: true, message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/check-username', async (req, res) => {
  const { username } = req.body;

  if (!username) {
    return res.status(400).json({ success: false, message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ' });
  }

  try {
    const pool = req.app.locals.db;
    const request = pool.request();

    request.input('username', mssql.VarChar, username);

    const result = await request.query(`
      SELECT 1 FROM Customers WHERE UserName = @username
    `);

    if (result.recordset.length > 0) {
      res.json({ exists: true, message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ' });
    } else {
      res.json({ exists: false, message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–±–æ–¥–Ω–æ' });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–∏–Ω–∞:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–∏–Ω–∞' });
  }
});
app.post('/api/createSale', async (req, res) => {
  const { customerId, carId, salePrice, employeeId } = req.body;
  console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { customerId, carId, salePrice, employeeId }); // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
  if (!customerId || !carId || !salePrice) {
    return res.status(400).json({
      success: false,
      message: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã (CustomerID, CarID, SalePrice).'
    });
  }

  try {
    const pool = req.app.locals.db;
    const request = pool.request();

    request.input('customerId', mssql.Int, customerId);
    request.input('carId', mssql.Int, carId);
    request.input('salePrice', mssql.Decimal(18, 2), salePrice);
    request.input('saleDate', mssql.Date, new Date());

    // –î–æ–±–∞–≤–ª—è–µ–º employeeId, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω
    if (employeeId) {
      request.input('employeeId', mssql.Int, employeeId);
    }

    const query = `
      INSERT INTO Sales (CustomerID, CarID, SalePrice, SaleDate${employeeId ? ', EmployeeID' : ''})
      VALUES (@customerId, @carId, @salePrice, @saleDate${employeeId ? ', @employeeId' : ''})
    `;

    await request.query(query);

    const updateQuery = `
    UPDATE Cars
    SET Available = 0
    WHERE CarID = @carId
  `;
  await request.query(updateQuery);
  
    res.json({ success: true, message: '–ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.' });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏:', error);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂–∏.' });
  }
});
// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.post('/api/getUserOrders', async (req, res) => {
  const { customerId } = req.body;

  if (!customerId) {
    return res.status(400).json({ success: false, message: "–ù–µ –ø–µ—Ä–µ–¥–∞–Ω ID –ø–æ–∫—É–ø–∞—Ç–µ–ª—è." });
  }

  try {
    const pool = await mssql.connect(sqlConfig);
    const result = await pool.request()
      .input('CustomerID', mssql.Int, customerId)
      .query(`
        SELECT Sales.SaleID, Cars.Model, Sales.SalePrice, Sales.SaleDate
        FROM Sales
        JOIN Cars ON Sales.CarID = Cars.CarID
        WHERE Sales.CustomerID = @CustomerID
        ORDER BY Sales.SaleDate DESC
      `);

    res.json({ success: true, orders: result.recordset });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
    res.status(500).json({ success: false, message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." });
  }
});
